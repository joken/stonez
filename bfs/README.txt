# BFS (幅優先探索）
 今頑張って書いている幅優先探索っぽい動きをするやつです。分割とかしている余裕はあんまりないのでやっていません。気になる方がおられましたら好きにやってください。

# ソースコード上の注意点
 現在、フィールドや石の、「どこが埋まっていて、どこが空いているか」という情報をint型の二次元配列で保持しています。空いている状態は-1(empty_val)、埋まっている状態は石番号で表します。フィールド上の埋まっている場所には257を突っ込んでいます（これには実は少しだけ事情があります。というのも、隣接した石の中に、自分より番号の低い石があるかどうかの判定に使うつもりでした。しかし、いまは使っていません)。

# 流れ
 入力を受け付けるときに「フィールド上の空いている場所」を「初期フィールド空きマス」として持つ。また、石の埋まっている場所を「石の埋まっているマス」として持つ。

 「初期フィールド空きマス」と「石0の埋まっているマス」から、「初期フィールド上に石0を置くことができそうな場所の候補リスト」を生成する。これをすべてキューに突っ込む。

 キューに候補が存在している間ずっと、以下の処理を繰り返す
 　「石を置くことができそうな場所の候補」と「置きたい石」、「現在のフィールドの状態」をつかって、石を置くことができるかどうか試す。
===>石が置けることがわかったら、現在フィールドのスコア（zk数）を見て、最高値を更新していれば、それを最高のフィールドとする。さらに、「現在置かれている石の隣接マスリスト」と「次の番号の石の埋まっているマス」から、「次に石を置けそうな場所の候補リスト」を生成してこれをキューに突っ込む
　キューの先頭（使用済み）を削除する

#問題点
　やっぱり遅い
　石の回転を考慮していない
　石を置かない処理を考慮していない（＝＞石nがおけないと石n+1以降を置く可能性がない）
